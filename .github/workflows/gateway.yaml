# 
# GitHub Actions workflow.
#
# Automatically deploys the Node.js microservice to Kubernetes on push to the main branch.
# For real use you might want to restrict this to the "prod" branch.
#

name: Deploy gateway

on:
  #
  # Deploy the microservice on push to any branch of this code repository.
  #
  push: 
    branches:
      - main
    paths:
      - gateway/**

  #
  # Allows deployment to be invoked manually through the GitHub Actions user interface.
  #
  workflow_dispatch:

  repository_dispatch:
    types: [deploy-gateway]

jobs:

  deploy:
    runs-on: ubuntu-latest
    
    env:
      VERSION: latest
      CONTAINER_REGISTRY: ${{ secrets.CONTAINER_REGISTRY }}
      REGISTRY_UN: ${{ secrets.REGISTRY_UN }}
      REGISTRY_PW: ${{ secrets.REGISTRY_PW  }}
      NAME: gateway
      DIRECTORY: gateway

    steps:
      
      # Checks-out your repository under $GITHUB_WORKSPACE.
      - uses: actions/checkout@v3

      #
      # Builds the Docker image.
      #
      - name: Build
        run: ./scripts/cd/build-image.sh

      #
      # Publishes the Docker image to the container registry.
      #
      - name: Publish
        run: ./scripts/cd/push-image.sh

      - name: Trigger E2E tests
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.everest-preview+json" \
            https://api.github.com/repos/daosgava/daniel-garcia-sit772-10-hd/dispatches \
            -d '{"event_type":"run-tests"}'

      - name: Wait for E2E tests to complete
        uses: actions/github-script@v6
        with:
          script: |
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: 'daosgava',  // Owner of the target repository
              repo: 'daniel-garcia-sit772-10-hd',  // Name of the target repository
              event: 'repository_dispatch',  // This identifies the workflow triggered by the dispatch
              status: 'completed',           // Check for completed status
              per_page: 1                    // Get the latest run
            });

            if (runs.workflow_runs.length === 0) {
              throw new Error('No E2E workflow runs found.');
            }
            const run_id = runs.workflow_runs[0].id;

            const status = await github.rest.actions.getWorkflowRun({
              owner: 'daosgava',
              repo: 'daniel-garcia-sit772-10-hd',
              run_id: run_id,
            });

            if (status.data.conclusion !== 'success') {
              throw new Error('E2E tests failed.');
            }

      #
      # Installs Kubectl and connects it to the cluster.
      #
      # https://github.com/marketplace/actions/kubernetes-cli-kubectl
      #
      # - uses: tale/kubectl-action@v1
      #   with:
      #     base64-kube-config: ${{ secrets.KUBE_CONFIG }}
      #     kubectl-version: v1.24.2
      - name: Setup kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode | gunzip > ~/.kube/config
          chmod 600 ~/.kube/config

      # Install Kubectl and use the decompressed kubeconfig
      - uses: azure/setup-kubectl@v1
        with:
          version: 'v1.24.2'

      #
      # Expands the configuration template and deploys the microservice.
      #
      - name: Deploy
        run: ./scripts/cd/deploy.sh
