# 
# GitHub Actions workflow.
#
# Automatically deploys the Node.js microservice to Kubernetes on push to the main branch.
# For real use you might want to restrict this to the "prod" branch.
#

name: Deploy history

on:
  #
  # Deploys the microservice on push to the specified subdirectory in the main branch of this code repository.
  #
  push: 
    branches:
      - main
    paths:
      - history/**

  #
  # Allows deployment to be invoked manually through the GitHub Actions user interface.
  #
  workflow_dispatch: 

jobs:

  deploy:
    runs-on: ubuntu-latest
    
    env:
      VERSION: ${{ github.sha }}
      CONTAINER_REGISTRY: ${{ secrets.CONTAINER_REGISTRY }}
      REGISTRY_UN: ${{ secrets.REGISTRY_UN }}
      REGISTRY_PW: ${{ secrets.REGISTRY_PW  }}
      NAME: history
      DIRECTORY: history

    steps:
      
      # Checks-out your repository under $GITHUB_WORKSPACE.
      - uses: actions/checkout@v3

      #
      # Builds the Docker image.
      #
      - name: Build
        run: ./scripts/cd/build-image.sh

      #
      # Publishes the Docker image to the container registry.
      #
      - name: Publish
        run: ./scripts/cd/push-image.sh

      #
      # Installs Kubectl and connects it to the cluster.
      #
      # https://github.com/marketplace/actions/kubernetes-cli-kubectl
      #
      # - uses: tale/kubectl-action@v1
      #   with:
      #     base64-kube-config: ${{ secrets.KUBE_CONFIG }}
      #     kubectl-version: v1.24.2
      - name: Setup kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode | gunzip > ~/.kube/config
          chmod 600 ~/.kube/config

      # Install Kubectl and use the decompressed kubeconfig
      - uses: azure/setup-kubectl@v1
        with:
          version: 'v1.24.2'

      - name: Update Config File
        run: |
          CONFIG_FILE=./configs/config.json
          # Create the configs directory if it doesn't exist
          mkdir -p ./configs

          # Check if config.json exists, create it if not
          if [ ! -f $CONFIG_FILE ]; then
            echo '{"services": {}}' > $CONFIG_FILE
          fi
          
          # Update the version for the respective service
          jq --arg version "${{ github.sha }}" --arg service "$NAME" '.services[$service].version = $version' $CONFIG_FILE > tmp.$$.json && mv tmp.$$.json $CONFIG_FILE

      #
      # Upload the updated config file as an artifact
      #
      - name: Upload Config File
        uses: actions/upload-artifact@v3
        with:
          name: config-file
          path: config.json

      #
      # Expands the configuration template and deploys the microservice.
      #
      - name: Deploy
        run: ./scripts/cd/deploy.sh
